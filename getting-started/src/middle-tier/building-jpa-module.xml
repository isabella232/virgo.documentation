<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
		"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="middle-tier.building-jpa-module">
	<title>Building the JPA module</title>
	<para>
		In this section the JPA module in @greenpages@ is created, building upon an existing skeleton. 
        JPA and its metadata are configured, and a JPA-based Directory service implementation
		is published which is then consumed by the application&rsquo;s Web bundle.
	</para>
	<section id="middle-tier.building-jpa-module.completing-jpadirectory">
		<title>Completing the JPA-based Directory implementation</title>
		<para>
			The <literal>greenpages.jpa</literal> starter project provides the beginnings of a JPA-based implementation of
			<literal>Directory</literal> named <literal>JpaDirectory</literal>. Import the <literal>greenpages.jpa</literal> project 
			from the <literal>$GREENPAGES_HOME/start</literal> directory.
		</para>
		
		<para>
			Open the <code>JpaDirectory.java</code> source file 
			in the <literal>greenpages.jpa</literal> package of <literal>greenpages.jpa</literal> project (under <code>src/main/java</code>).
		</para>
		
		<para>
			The source file
			contains a Java Persistence Query Language (JPQL) search query that will be used to retrieve 
			listings from the database, and empty
			implementations of the <literal>search</literal> and <literal>findListing</literal> methods.
		</para>
		
		<para>
			First add an <literal>EntityManager</literal> to it. 
			Before the new field
			can be added, <literal>EntityManager</literal> must be available on the classpath. 
			Open the pom for 
			<literal>greenpages.jpa</literal> and add the following dependency:
<programlisting language="xml"><![CDATA[        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>com.springsource.javax.persistence</artifactId>
        </dependency>]]>
</programlisting>
		</para>
		
		<para>
			Now return to <literal>JpaDirectory</literal> and add the following field to the class along with an
			import for <literal>javax.persistence.EntityManager</literal> (which should be suggested by Eclipse):
<programlisting language="java">    private EntityManager em;
</programlisting>
		</para>
		
		<para>
			This <literal>EntityManager</literal> can now be used to implement the <literal>search</literal> and
			<literal>findListing</literal> methods. Update the implementations of these two methods to match the
			following implementations and then save the updated class:
<programlisting language="java"><![CDATA[   public Listing findListing(int id) {
        return em.find(JpaListing.class, id);
    }

    @SuppressWarnings("unchecked")
    public List<Listing> search(String term) {
        return em.createQuery(SEARCH_QUERY).setParameter("term",
                "%" + term.toUpperCase() + "%").getResultList();
    }]]>
</programlisting>
			(Warnings from Eclipse should now be absent.)
		</para>
		
		<para>
			The application context now needs to be updated to create <literal>JpaDirectory</literal> and to create
			an <literal>EntityManager</literal> that can be injected into <literal>JpaDirectory</literal>.
		</para>

		<para>
			Open
			<literal>module-context.xml</literal> in the <literal>META-INF/spring</literal> folder of the
			<literal>greenpages.jpa</literal>. Add the following beans that will create <literal>JpaDirectory</literal>
			and an <literal>EntityManager</literal>, enable load-time weaving that is required by JPA, and enable
			annotation-based configuration that will allow the <literal>EntityManager</literal> to be injected into
			<literal>JpaDirectory</literal>:
<programlisting language="xml"><![CDATA[    <!--
        Activates a load-time weaver for the context. Any bean within the
        context that implements LoadTimeWeaverAware (such as
        LocalContainerEntityManagerFactoryBean) will receive a reference to
        the autodetected load-time weaver.
    -->
    <context:load-time-weaver aspectj-weaving="on" />

    <!-- JPA EntityManagerFactory -->
    <bean id="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
        p:dataSource-ref="dataSource">
        <property name="jpaVendorAdapter">
            <bean id="jpaVendorAdapter"
                class="org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter"
                p:databasePlatform="org.eclipse.persistence.platform.database.HSQLPlatform"
                p:showSql="true" />
        </property>
    </bean>

    <!--
        Activates various annotations to be detected in bean classes: Spring's
        @Required and @Autowired, as well as JSR 250's @PostConstruct,
        @PreDestroy and @Resource (if available) and JPA's @PersistenceContext
        and @PersistenceUnit (if available).
    -->
    <context:annotation-config />

    <bean id="directory" class="greenpages.jpa.JpaDirectory" />]]>
</programlisting>
		</para>	

		<para>
			The addition of the new beans to the context has introduced a new dependency upon Spring&rsquo;s ORM support and upon
			EclipseLink and its JPA implementation. Add the following dependencies to the pom file for
			<literal>greenpages.jpa</literal> and save it:
<programlisting language="xml"><![CDATA[        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>org.springframework.spring-library</artifactId>
            <type>libd</type>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>com.springsource.org.eclipse.persistence</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>com.springsource.org.eclipse.persistence.jpa</artifactId>
        </dependency>]]>
</programlisting>
		</para>
		
		<para>
			Now switch back to <literal>module-context.xml</literal> for <literal>greenpages.jpa</literal> and observe
			that the errors relating to Spring&rsquo;s ORM types have now been resolved. 
			Save <literal>module-context.xml</literal>.
		</para>
		
		<para>
			The application context now contains a factory that will create an <literal>EntityManager</literal> and is
			configured for annotation-based configuration. 
			The last step in completing <literal>JpaDirectory</literal>
			is to annotate the <literal>EntityManager</literal> field so that Spring will inject the
			<literal>EntityManager</literal> created by the factory into the field.
		</para>
		
		<para>
			Open <literal>JpaDirectory.java</literal> again and add an annotation <literal>@PersistenceContext</literal> to the
			<literal>EntityManager</literal> field. 
<programlisting language="java">@PersistenceContext
private EntityManager em;
</programlisting>
			Eclipse will suggest an import for
			<literal>javax.persistence.PersistenceContext</literal>; accept this and save the file.
		</para>
	</section>

	<section id="middle-tier.building-jpa-module.providing-jpa-metadata">
		<title>Providing the JPA metadata</title>
		<para>
			JPA uses a file named <literal>META-INF/persistence.xml</literal> to describe persistence units.
			<literal>persistence.xml</literal> refers to a second file, typically named
			<literal>META-INF/orm.xml</literal>, to define entity mappings. 
			In the case of @greenpages@ the
			<literal>persistence.xml</literal> file specifies a single persistence unit that points to the
			<literal>greenpages.JpaListing</literal> class. 
			The specified mapping file
			(<literal>META-INF/orm.xml</literal>) tells the JPA implementation how to map
			<literal>JpaListing</literal> to the <literal>LISTING</literal> database table described above.
			(For more information on JPA consult the Documentation section in the appendix.)
		</para>
		<para>
			Create a new file named <literal>persistence.xml</literal> in the <literal>META-INF</literal> folder of
			the <literal>greenpages.jpa</literal> project. Add the following contents to the new file and then save it:
<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence 
                        http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
    version="1.0">

    <persistence-unit name="@greenpages@" transaction-type="RESOURCE_LOCAL">
        <class>greenpages.jpa.JpaListing</class>
    </persistence-unit>

</persistence>]]>
</programlisting>
		</para>

		<para>
			Now create a new file named <literal>orm.xml</literal> also in the <literal>META-INF</literal> folder
			alongside <literal>persistence.xml</literal>. Add the following contents to the new file and then save it:
<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm 
                        http://java.sun.com/xml/ns/persistence/orm_1_0.xsd"
    version="1.0">
    <package>greenpages.jpa</package>
    <entity class="greenpages.jpa.JpaListing" name="Listing">
        <table name="LISTING" />
        <attributes>
            <id name="listingNumber">
                <column name="LISTING_NUMBER" />
                <generated-value strategy="TABLE" />
            </id>
            <basic name="firstName">
                <column name="FIRST_NAME" />
            </basic>
            <basic name="lastName">
                <column name="LAST_NAME" />
            </basic>
            <basic name="emailAddress">
                <column name="EMAIL_ADDRESS" />
            </basic>
        </attributes>
    </entity>
</entity-mappings>]]>
</programlisting>
		</para>
	</section>

	<section id="middle-tier.building-jpa-module.consuming-datasource">
		<title>Consuming the DataSource from the service registry</title>
		<para>
			The <literal>entityManagerFactory</literal> bean that was added earlier depends upon a bean named
			<literal>dataSource</literal> which it will use to connect the <literal>EntityManager</literal> 
			to the @greenpages@ database. 
			The <literal>greenpages.db</literal> module already publishes a
			<literal>DataSource</literal> to the service registry. 
			<literal>greenpages.jpa</literal> must now be
			updated to consume this.
		</para>
		
		<para>
			Open <literal>osgi-context.xml</literal> in the <literal>META-INF/spring</literal> folder of the
			<literal>greenpages.jpa</literal> project and add the following:
<programlisting language="xml"><![CDATA[    <!-- import the DataSource from OSGi -->
    <osgi:reference id="dataSource" interface="javax.sql.DataSource" />]]>
</programlisting>
		</para>
		<para>
			This will result in a bean being created in the application context that is named <literal>dataSource</literal>.
			The bean will be of type <literal>javax.sql.DataSource</literal> and will be backed by a service found in the
			OSGi service registry that implements the <literal>javax.sql.DataSource</literal> interface.
			(Some warnings concerning the <literal>dataSource</literal> bean will now disappear.)
		</para>
	</section>
	<section id="middle-tier.building-jpa-module.publishing-directory">
		<title>Publishing the Directory implementation to the service registry</title>
		<para>
			To make the JPA-based <literal>Directory</literal> implementation available to @greenpages@&rsquo;
			Web module it must be <quote>published</quote> to the OSGi service registry.
		</para>
		<para>
			Open <literal>osgi-context.xml</literal> in the <literal>META-INF/spring</literal> folder of the
			<literal>greenpages.jpa</literal> project, add the following and then save the updated file:
<programlisting language="xml"><![CDATA[    <!-- export the directory bean to OSGi under the Directory interface -->
    <osgi:service ref="directory" interface="greenpages.Directory" />]]>
</programlisting>
		</para>		
	</section>

	<section id="middle-tier.building-jpa-module.generating-manifest">
		<title>Generating greenpages.jpa&rsquo;s manifest using Bundlor</title>
		<para>
			Open the <literal>template.mf</literal> file in the root of the <literal>greenpages.jpa</literal>
			project and switch to the <literal>template.mf</literal> tab. Add the following entries to the template
			and save it.
<programlisting>Import-Bundle: com.springsource.org.eclipse.persistence;version="[1.0.0,1.0.0]",
 com.springsource.org.eclipse.persistence.jpa;version="[1.0.0,1.0.0]"
Import-Package: org.springframework.context.weaving;version="[3.0,3.1)",
 org.springframework.transaction.aspectj;version="[3.0,3.1)"
Excluded-Exports: greenpages.jpa
</programlisting>
		</para>	
		<para>
			The <literal>Excluded-Exports</literal> header tells Bundlor that the
			<literal>greenpages.jpa</literal> should not be exported from the <literal>greenpages.jpa</literal>
			bundle.
		</para>
		
		<para>
			The <literal>Import-Package</literal> entries for
			<literal>org.springframework.context.weaving</literal> and
			<literal>org.springframework.transaction.aspectj</literal> are needed as Bundlor cannot, yet, 
			detect that these packages are required.
		</para>
		
		<para>
			Lastly, the <literal>Import-Bundle</literal> entries for EclipseLink and its JPA implementation
			are needed as Bundlor cannot, yet, detect that EclipseLink is the JPA implementation that is
			being used by @greenpages@.
		</para>
		
		<para>
			Switch to the <emphasis>Overview</emphasis> tab and click <emphasis>Update MANIFEST.MF</emphasis>.
			As with <literal>greenpages.db</literal> before, this update may result in some errors being
			reported in the manifest as the project is not associated with a targetted runtime. Double-click the
			<literal>MANIFEST.MF</literal> file in the <literal>greenpages</literal> project in the Package Explorer.
			Switch to the <emphasis>Dependencies</emphasis> tab and click <emphasis>Add…</emphasis>. Select
			<literal>greenpages.jpa</literal> and click <emphasis>OK</emphasis>. Save the updated file. The
			problems in the manifest should now be resolved and the @greenpages@ application should be redeployed
			due to the addition of the <literal>greenpages.jpa</literal> module. This redeployment should succeed
			and it&rsquo;s now time to try the application again.
		</para>
		<para>
		(A possible action if this fails is to Update (@maven@) Dependencies on the project right-click menu in the @maven@ sub-menu.)
		</para>
	</section>
</section>
