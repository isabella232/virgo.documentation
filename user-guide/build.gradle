import com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl
import javax.xml.parsers.SAXParserFactory
import javax.xml.transform.Result
import javax.xml.transform.Source
import javax.xml.transform.Transformer
import javax.xml.transform.sax.SAXSource
import javax.xml.transform.stream.StreamSource
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.TransformerFactory
import org.xml.sax.InputSource
import org.xml.sax.XMLReader

task downloadDocbookResources(type: DownloadDocbookResourcesTask) {
}

task extractDocbookResources(dependsOn: downloadDocbookResources) {
    File docbookXmlSourceFile = new File(project.buildDir, "docbook-xml-4.5.zip")
    File docbookXmlDestinationDir = new File(project.buildDir, "docbook-xml-4.5")
    File docbookXslSourceFile = new File(project.buildDir, "docbook-xsl-1.74.0.zip")
    File docbookXslDestinationDir = new File(project.buildDir, "docbook-xsl-1.74.0")
    inputs.file docbookXmlSourceFile
    inputs.file docbookXslSourceFile
    outputs.dir docbookXmlDestinationDir
    outputs.dir docbookXslDestinationDir

    doLast {
        copy {
            from zipTree(docbookXmlSourceFile)
            into docbookXmlDestinationDir
        }
        copy {
            from zipTree(docbookXslSourceFile)
            into docbookXslDestinationDir
        }
    }
}

task docHtml(dependsOn: extractDocbookResources) {
    doLast {
        File workDir = new File(project.buildDir, "work")
        workDir.mkdir();

        copy {
            from new File(project.projectDir, 'src/docs/docbook/input')
            into workDir
        }

        File indexFile = new File(workDir, "virgo-user-guide.xml")
        println "Processing index file: '${indexFile}'"
        InputSource inputSource = new InputSource(indexFile.getAbsolutePath());

        String outputFilename = indexFile.name[ 0..indexFile.name.size() - 4 ] + 'html';
        File outputFile = new File(workDir, outputFilename);
        println "Output file: '${outputFile}'"

        Result result = new StreamResult(outputFile.getAbsolutePath());
        //        CatalogResolver resolver = new CatalogResolver(createCatalogManager());

        SAXParserFactory factory = new SAXParserFactoryImpl()
        factory.setXIncludeAware(true)
        TransformerFactory transformerFactory = new TransformerFactoryImpl();
        //        transformerFactory.setURIResolver(resolver);

        File stylesheet = new File(project.projectDir, 'src/docs/docbook/styles/html/custom.xsl')
        URL stylesheetUrl = stylesheet.toURI().toURL()

        Source source = new StreamSource(stylesheetUrl.openStream(), stylesheetUrl.toExternalForm());
        Transformer transformer = transformerFactory.newTransformer(source);

        //        if (highlightingEnabled) {
        //            File highlightingDir = new File(getProject().getBuildDir(), "highlighting");
        //            if (!highlightingDir.exists()) {
        //                highlightingDir.mkdirs();
        //                extractHighlightFiles(highlightingDir);
        //            }
        //
        //            transformer.setParameter("highlight.source", "1");
        //            transformer.setParameter("highlight.xslthl.config", new File(highlightingDir, "xslthl-config.xml").toURI().toURL());
        //
        //            if (admonGraphicsPath != null) {
        //                transformer.setParameter("admon.graphics", "1");
        //                transformer.setParameter("admon.graphics.path", admonGraphicsPath);
        //            }
        //        }
        //
        //        preTransform(transformer, srcFile, outputFile);
        //

        XMLReader xmlReader = factory.newSAXParser().getXMLReader();
        //        reader.setEntityResolver(resolver);
        transformer.transform(new SAXSource(xmlReader, inputSource), result);
        //
        //        postTransform(outputFile);
    }
}

public class DownloadDocbookResourcesTask extends DefaultTask {

    @OutputFile
    File docbookXmlDestinationFile = new File(project.buildDir, "docbook-xml-4.5.zip")

    @OutputFile
    File docbookXslDestinationFile = new File(project.buildDir, "docbook-xsl-1.74.0.zip")

    @TaskAction
    public final void download() {
        def docbookXmlDownloadUrl = "http://www.docbook.org/xml/4.5/docbook-xml-4.5.zip"
        ant.get(src: docbookXmlDownloadUrl, dest: docbookXmlDestinationFile, usetimestamp: true)

        def docbookXslDownloadUrl = "http://mirrors.ibiblio.org/maven2/net/sf/docbook/docbook-xsl/1.74.0/docbook-xsl-1.74.0-resources.zip"
        ant.get(src: docbookXslDownloadUrl, dest: docbookXslDestinationFile, usetimestamp: true)
    }
}

public class DocbookTask extends DefaultTask {

    //    @Input
    //    boolean highlightingEnabled = true;
    //
    //    String admonGraphicsPath;

    @OutputDirectory
    File docsDir = new File(project.getBuildDir(), "docs");

    //    @InputFiles
    //    Configuration classpath
    //
    @TaskAction
    public final void transform() {

    }

    //    private CatalogManager createCatalogManager() {
    //        CatalogManager manager = new CatalogManager();
    //        manager.setIgnoreMissingProperties(true);
    //        ClassLoader classLoader = this.getClass().getClassLoader();
    //        StringBuilder builder = new StringBuilder();
    //        String docbookCatalogName = "docbook/catalog.xml";
    //        URL docbookCatalog = classLoader.getResource(docbookCatalogName);
    //
    //        if (docbookCatalog == null) {
    //            throw new IllegalStateException("Docbook catalog " + docbookCatalogName + " could not be found in " + classLoader);
    //        }
    //
    //        builder.append(docbookCatalog.toExternalForm());
    //
    //        Enumeration enumeration = classLoader.getResources("/catalog.xml");
    //        while (enumeration.hasMoreElements()) {
    //            builder.append(';');
    //            URL resource = (URL) enumeration.nextElement();
    //            builder.append(resource.toExternalForm());
    //        }
    //        String catalogFiles = builder.toString();
    //        manager.setCatalogFiles(catalogFiles);
    //        return manager;
    //    }
}

/**
 */
//class DocbookHtml extends Docbook {
//
//    @Override
//    protected void preTransform(Transformer transformer, File sourceFile, File outputFile) {
//        String rootFilename = outputFile.getName();
//        rootFilename = rootFilename.substring(0, rootFilename.lastIndexOf('.'));
//        transformer.setParameter("root.filename", rootFilename);
//        transformer.setParameter("base.dir", outputFile.getParent() + File.separator);
//    }
//}

/**
 */
//class DocbookFoPdf extends Docbook {
//
//    /**
//     * <a href="http://xmlgraphics.apache.org/fop/0.95/embedding.html#render">From the FOP usage guide</a>
//     */
//    @Override
//    protected void postTransform(File foFile) {
//        FopFactory fopFactory = FopFactory.newInstance();
//
//        OutputStream out = null;
//        final File pdfFile = getPdfOutputFile(foFile);
//        logger.debug("Transforming 'fo' file " + foFile + " to PDF: " + pdfFile);
//
//        try {
//            out = new BufferedOutputStream(new FileOutputStream(pdfFile));
//
//            Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, out);
//
//            TransformerFactory factory = TransformerFactory.newInstance();
//            Transformer transformer = factory.newTransformer();
//
//            Source src = new StreamSource(foFile);
//
//            Result res = new SAXResult(fop.getDefaultHandler());
//
//            switch (project.gradle.startParameter.logLevel) {
//                case LogLevel.DEBUG:
//                case LogLevel.INFO:
//                    break;
//                default:
//                    // only show verbose fop output if the user has specified 'gradle -d' or 'gradle -i'
//                    LoggerFactory.getILoggerFactory().getLogger('org.apache.fop').level = Level.ERROR
//            }
//
//            transformer.transform(src, res);
//
//        } finally {
//            if (out != null) {
//                out.close();
//            }
//        }
//
//        if (!foFile.delete()) {
//            logger.warn("Failed to delete 'fo' file " + foFile);
//        }
//    }
//
//    private File getPdfOutputFile(File foFile) {
//        return new File(foFile.parent, this.project.rootProject.name + '-reference.pdf')
//    }
//}

//docbookPdf {
//    sourceFileName = "docbook.xml"
//    stylesheet = file("doc/docbook-style.xsl")
//    sourceDirectory = file( "doc" )
//    docsDir = new File(project.getBuildDir(), "docs");
//}

