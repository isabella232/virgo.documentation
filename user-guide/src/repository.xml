<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
		"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="repository">
	<title>The Provisioning Repository</title>
	<section id="repository-introduction">
			<title>Overview of the Provisioning Repository</title>
			<para>
				This section describes the provisioning repository feature of @product.name@, the reasons for using it, and how to configure it.
			</para>
			<para>
				In most use cases, your application has a dependency on one or more separate artifacts; these artifacts might include OSGi bundles, configuration artifacts, third-party libraries, PARs or plans.  A typical example is a Spring application that depends on a third-party library such as Spring Framework or Hibernate. 
			</para>
			<para>
				The way you express this dependency depends on the artifact.  For example, a plan is by definition a list of dependent bundles.
			</para>
			<para>
				Libraries are another example.  Some third-party dependencies consist of multiple bundles but are logically one unit.  To support this, the @product.name@ introduces the concept of a library.  A library is a collection of related bundles that can be referenced as a whole.  You typically express the dependencies between your application and third-party libraries using the <literal>Import-Package</literal>, <literal>Import-Bundle</literal>, or <literal>Import-Library</literal> manifest header in the <literal>MANIFEST.MF</literal> file of your application.  The <literal>Import-Package</literal> header is standard to OSGi; <literal>Import-Bundle</literal> and <literal>Import-Library</literal>, however, are specific to @product.name@.  
			</para>
			<para>
				For additional details about the creation and usage of libraries, as well as general information about dependencies, see <ulink url="../../programmer-guide/html/index.html">Programmer&rsquo;s Guide</ulink>. 
			</para>
			<para>
				In @product.name@, you store all third-party dependencies required by your applications, such as Spring Framework and Hibernate, as artifacts in the provisioning repository.   As mentioned above, you can store the following types of artifacts in the repository:
			</para>
			<itemizedlist>
			  <listitem>OSGi bundles</listitem>
			  <listitem>Libraries</listitem>
			  <listitem>PARs</listitem>
			  <listitem>Plans</listitem>
			  <listitem>Configuration Artifacts</listitem>
			</itemizedlist>
			<para>
				When you deploy your application,  @product.name@ installs the bundle(s) comprising the application to the @short.product.name@ runtime; part of this internal installation procedure is to satisfy all the application&rsquo;s dependencies.  If your application has a dependency that cannot be satisfied from the bundles that you have already deployed (and @short.product.name@ has thus installed), then @short.product.name@ searches the provisioning repository for an artifact that can satisfy that dependency. 
			</para>
			<para>
				The provisioning repository for a particular instance of @product.name@ can include artifacts in the following general locations:
			  <itemizedlist>
			    <listitem>Local: This means that artifacts have been physically installed in the provisioning repository directory structure of the local @product.name@ instance.   The artifacts in a local repository include installed third-party libraries, bundles supplied by @short.product.name@, bundles supplied by an end user, and internal bundles used only by @short.product.name@.  You can further categorize this location into <literal>external</literal> directories that adhere to a specified search pattern and are scanned by @short.product.name@ just on a clean startup, or <literal>watched</literal> directories that point to a single directory location and which @short.product.name@ scans on a regular basis.  </listitem>
			    <listitem>Remote: This means that a local instance of @product.name@ gets the artifact from a remotely-hosted repository that is physically located on a remote @product.name@ instance.  </listitem>
			  </itemizedlist>
			You configure the provisioning repository using the <literal>$SERVER_HOME/config/org.eclipse.virgo.repository.properties</literal> file.  
			</para>
			<para> As previously described, a particular instance of @product.name@ can itself also act as a repository host for remote server instances to use when satisfying the dependencies of the applications deployed to it.  In this case, you configure a hosted repository using the <literal>$SERVER_HOME/config/org.eclipse.virgo.apps.repository.properties</literal> file.  Typically, only remote clients use hosted repositories and their contents; the @product.name@ instance that actually hosts the repository does not typically use the artifacts in it.  Rather, it uses artifacts in its local repository.
			</para>
			<para>
				Making a third-party dependency available to your application is simply a matter of adding its artifact to the appropriate location in the provisioning repository.  This could be either in the local directories or the remote ones if you are getting artifacts from a remotely-hosted repository.
			</para>
	    <section id="repository-structure">
			<title>Local Repository Structure</title>
			<para>
				When you first install @product.name@, the local provisioning repository is located at <literal>$SERVER_HOME/repository</literal> by default and consists of two main directories: <literal>ext</literal> and <literal>usr</literal>.  The <literal>ext</literal> directory contains artifacts supplied with the @product.name@ and <literal>usr</literal> contains artifacts supplied by the user.  
			</para>
	    </section>
	    <section id="repository-installing-bundles">
			<title>Installing Artifacts to a Repository</title>
			<para>
				To install an artifact into the default repository, simply copy it into the <literal>$SERVER_HOME/repository/usr</literal> directory. 
			</para>
			<para>If you have configured additional watched or external repositories (additional, that is, to the default ones already configured in a freshly-installed @short.product.name@ instance), you install the artifacts in the same way: simply copy the files to the configured directories.  You configure additional watched or external repositories in the same file as the default repositories: <literal>$SERVER_HOME/config/org.eclipse.virgo.repository.properties</literal>.
			</para>
            <para>When you install a plan or a library, you must ensure that all referenced artifacts within the plan or library have been installed as well.
			</para>
			<para>Artifacts must have unique names so it is considered best practice to include the version number in the file name, 
			allowing for multiple versions of the artifact to be installed at the same time.   For example, a bundle file name might be <literal>my-exciting-bundle.2.1.0.jar</literal>.
			</para>
			<para>	
				For watched repositories, such as <literal>$SERVER_HOME/repository/usr</literal>, the @product.name@ automatically detects changes
				at runtime, thereby avoiding the need to restart the @short.product.name@. 
			</para>
			<para>
				Of specific relevance during development is picking up changes to an application&rsquo;s direct dependencies during deployment of the application.  For example, if you deploy an application and receive a message that a dependency is missing, you can simply add the dependency to the repository and then redeploy the application.  The redeploy will cause the new dependency to be picked up, allowing progress to be made without restarting the @short.product.name@.  For other changes such as addition of optional dependencies, the @product.name@ must be restarted to pick up any changes to the provisioning repository.
			</para>
	    </section>
	</section>
	<section id="repository-brits">
		<title>Finding and Downloading Bundles from the @ebr@</title>
		<para>
		    The @ebr@ is a public collection of open source libraries commonly used for developing enterprise Java applications with the Spring Framework and @short.product.name@.  It contains hundreds of the most popular enterprise Java libraries made available for general use in an OSGi-ready format.  You can browse the collection and then download the bundles that you need into your own local repository.
		</para>
		<para>
			The @ebr@ is located <ulink url="http://www.springsource.com/repository">here</ulink>.
		</para>
		<para>
			<imagedata fileref="images/bundle-repository.png"/>
		</para>
		<para>
			You can find bundles in the repository using a number of options.  You use the &lsquo;Search&rsquo; facility by typing in a keyword.  The matching criteria returned can be explored by name, symbolic name, class, package or resource.
		</para>
		<para>
			There is also the option of clicking on &lsquo;Browse by Bundle&rsquo;.  This gives an alphabetical list of bundles.  You can select the desired bundle to see details and find the download link.  Finally, you can also choose to &lsquo;Browse by Library&rsquo;, which allows you to browse the alphabetical list of libraries in the repository.
		</para>		
	</section>
	<section id="repository-configuration">
		<title>Configuring the repository</title>
		<para>Details of how to configure a @product.name@ installation&rsquo;s provisioning repository can be found in <link linkend="configuring-provisioning-repository">Configuring the Provisioning Repository</link>.  See <link linkend="configuring-hosted-repo">Configuring a Hosted Repository</link> for details on how to configure a repository that remote clients can access, also called a hosted repository.
		</para>
		<para>
			The two configuration chapters describe the format of the repository properties files of @product.name@, how to add new directories to the local repository, how to configure the repository to get artifacts from a remote repository hosted on a remote @short.product.name@ instance, and how to configure the local @short.product.name@ instance to itself host a repository that other remote servers access.
		</para>
	</section>
</chapter>
